// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:../database.db"
}

model Product {
  id          String      @id @default(cuid(2))
  name        String
  slug        String      @unique
  sku         String      @unique
  description String
  price       Float
  saleprice   Float?
  weight      Float?
  height      Float?
  width       Float?
  length      Float?
  stock       Int         @default(0)
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  media       Media[]
  orderItems  OrderItem[]
}

model Order {
  invoiceNumber Int         @id @default(autoincrement())
  accepted      Boolean     @default(false)
  packaged      Boolean     @default(false)
  shipped       Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
}

model OrderItem {
  orderId   Int
  productId String
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [invoiceNumber])
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId]) // Composite primary key
}

model Review {
  id        String   @id @default(cuid(2))
  rating    Int
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String         @id @default(cuid(2))
  email         String         @unique
  password      String
  role          Role           @default(USER)
  name          String?
  posts         Post[]
  comments      Comment[]
  reviews       Review[]
  refreshTokens RefreshToken[]
  orders        Order[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Media {
  id               String    @id @default(cuid(2))
  name             String
  description      String?
  width            Int?
  height           Int?
  duration         Float?
  type             MediaType
  mimetype         String
  size             Int // i bytes
  url              String // hvor filen er tilg√¶ngelig
  filename         String
  originalFilename String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  product          Product[]
}

model Post {
  id        String      @id @default(cuid(2))
  title     String
  slug      String      @unique
  blocks    PostBlock[]
  comments  Comment[]
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  published DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model PostBlock {
  id        String    @id @default(cuid(2))
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  type      BlockType
  content   Json // Rich content depending on the type
  position  Int // Order of the block in the post
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String    @id @default(cuid(2))
  postId    String
  content   String
  userId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
}

enum BlockType {
  HEADING
  TEXT
  IMAGE
  QUOTE
  CODE
  VIDEO
}

enum MediaType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

enum Role {
  USER
  ADMIN
  EDITOR
}
